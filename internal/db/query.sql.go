// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCartItem = `-- name: AddCartItem :exec
INSERT INTO cart_items (
  cart_id, product_id, quantity
) VALUES (
  $1, $2, $3
)
ON CONFLICT (cart_id, product_id) 
DO UPDATE SET quantity = cart_items.quantity + EXCLUDED.quantity,
              updated_at = NOW()
`

type AddCartItemParams struct {
	CartID    pgtype.UUID
	ProductID int32
	Quantity  int32
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) error {
	_, err := q.db.Exec(ctx, addCartItem, arg.CartID, arg.ProductID, arg.Quantity)
	return err
}

const addCollectionImage = `-- name: AddCollectionImage :exec
INSERT INTO collection_images (
  collection_id, image_url
) VALUES (
  $1, $2
)
`

type AddCollectionImageParams struct {
	CollectionID int32
	ImageUrl     string
}

// Collection Images
func (q *Queries) AddCollectionImage(ctx context.Context, arg AddCollectionImageParams) error {
	_, err := q.db.Exec(ctx, addCollectionImage, arg.CollectionID, arg.ImageUrl)
	return err
}

const addProductImage = `-- name: AddProductImage :exec
INSERT INTO product_images (
  product_id, image_url
) VALUES (
  $1, $2
)
`

type AddProductImageParams struct {
	ProductID int32
	ImageUrl  string
}

// Product Images
func (q *Queries) AddProductImage(ctx context.Context, arg AddProductImageParams) error {
	_, err := q.db.Exec(ctx, addProductImage, arg.ProductID, arg.ImageUrl)
	return err
}

const addProductSize = `-- name: AddProductSize :exec
INSERT INTO product_sizes (
  product_id, size_name, stock
) VALUES (
  $1, $2, $3
)
`

type AddProductSizeParams struct {
	ProductID int32
	SizeName  string
	Stock     int32
}

// Product Sizes
func (q *Queries) AddProductSize(ctx context.Context, arg AddProductSizeParams) error {
	_, err := q.db.Exec(ctx, addProductSize, arg.ProductID, arg.SizeName, arg.Stock)
	return err
}

const addProductToCollection = `-- name: AddProductToCollection :exec
INSERT INTO collection_products (
  collection_id, product_id
) VALUES (
  $1, $2
)
ON CONFLICT (collection_id, product_id) DO NOTHING
`

type AddProductToCollectionParams struct {
	CollectionID int32
	ProductID    int32
}

// Collection Products
func (q *Queries) AddProductToCollection(ctx context.Context, arg AddProductToCollectionParams) error {
	_, err := q.db.Exec(ctx, addProductToCollection, arg.CollectionID, arg.ProductID)
	return err
}

const clearCart = `-- name: ClearCart :exec
DELETE FROM cart_items
WHERE cart_id = $1
`

func (q *Queries) ClearCart(ctx context.Context, cartID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, clearCart, cartID)
	return err
}

const createCart = `-- name: CreateCart :one
INSERT INTO carts (
  id
) VALUES (
  $1
)
RETURNING id, created_at, updated_at
`

func (q *Queries) CreateCart(ctx context.Context, id pgtype.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart, id)
	var i Cart
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const createCollection = `-- name: CreateCollection :one
INSERT INTO collections (
  name, description
) VALUES (
  $1, $2
)
RETURNING id, name, description, created_at, updated_at
`

type CreateCollectionParams struct {
	Name        string
	Description pgtype.Text
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRow(ctx, createCollection, arg.Name, arg.Description)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name, description, price
) VALUES (
  $1, $2, $3
)
RETURNING id, name, description, price, created_at, updated_at
`

type CreateProductParams struct {
	Name        string
	Description pgtype.Text
	Price       pgtype.Numeric
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.Description, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProductFitGuide = `-- name: CreateProductFitGuide :exec
INSERT INTO fit_guides (
  product_id, body_length, sleeve_length, chest_width, shoulder_width,
  arm_hole, front_rise, inseam, hem, back_rise, waist, thigh, knee
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
)
`

type CreateProductFitGuideParams struct {
	ProductID     int32
	BodyLength    pgtype.Numeric
	SleeveLength  pgtype.Numeric
	ChestWidth    pgtype.Numeric
	ShoulderWidth pgtype.Numeric
	ArmHole       pgtype.Numeric
	FrontRise     pgtype.Numeric
	Inseam        pgtype.Numeric
	Hem           pgtype.Numeric
	BackRise      pgtype.Numeric
	Waist         pgtype.Numeric
	Thigh         pgtype.Numeric
	Knee          pgtype.Numeric
}

func (q *Queries) CreateProductFitGuide(ctx context.Context, arg CreateProductFitGuideParams) error {
	_, err := q.db.Exec(ctx, createProductFitGuide,
		arg.ProductID,
		arg.BodyLength,
		arg.SleeveLength,
		arg.ChestWidth,
		arg.ShoulderWidth,
		arg.ArmHole,
		arg.FrontRise,
		arg.Inseam,
		arg.Hem,
		arg.BackRise,
		arg.Waist,
		arg.Thigh,
		arg.Knee,
	)
	return err
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections
WHERE id = $1
`

func (q *Queries) DeleteCollection(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCollection, id)
	return err
}

const deleteCollectionImage = `-- name: DeleteCollectionImage :exec
DELETE FROM collection_images
WHERE collection_id = $1 AND image_url = $2
`

type DeleteCollectionImageParams struct {
	CollectionID int32
	ImageUrl     string
}

func (q *Queries) DeleteCollectionImage(ctx context.Context, arg DeleteCollectionImageParams) error {
	_, err := q.db.Exec(ctx, deleteCollectionImage, arg.CollectionID, arg.ImageUrl)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const deleteProductImage = `-- name: DeleteProductImage :exec
DELETE FROM product_images
WHERE product_id = $1 AND image_url = $2
`

type DeleteProductImageParams struct {
	ProductID int32
	ImageUrl  string
}

func (q *Queries) DeleteProductImage(ctx context.Context, arg DeleteProductImageParams) error {
	_, err := q.db.Exec(ctx, deleteProductImage, arg.ProductID, arg.ImageUrl)
	return err
}

const getCart = `-- name: GetCart :one
SELECT id, created_at, updated_at FROM carts
WHERE id = $1 LIMIT 1
`

// Carts
func (q *Queries) GetCart(ctx context.Context, id pgtype.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, getCart, id)
	var i Cart
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getCartItemCount = `-- name: GetCartItemCount :one
SELECT COUNT(*) FROM cart_items
WHERE cart_id = $1
`

func (q *Queries) GetCartItemCount(ctx context.Context, cartID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getCartItemCount, cartID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCartItems = `-- name: GetCartItems :many
SELECT ci.product_id, ci.quantity, p.name, p.description, p.price
FROM cart_items ci
JOIN products p ON ci.product_id = p.id
WHERE ci.cart_id = $1
`

type GetCartItemsRow struct {
	ProductID   int32
	Quantity    int32
	Name        string
	Description pgtype.Text
	Price       pgtype.Numeric
}

// Cart Items
func (q *Queries) GetCartItems(ctx context.Context, cartID pgtype.UUID) ([]GetCartItemsRow, error) {
	rows, err := q.db.Query(ctx, getCartItems, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartItemsRow
	for rows.Next() {
		var i GetCartItemsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.Quantity,
			&i.Name,
			&i.Description,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollection = `-- name: GetCollection :one
SELECT id, name, description, created_at, updated_at FROM collections
WHERE id = $1 LIMIT 1
`

// Collections
func (q *Queries) GetCollection(ctx context.Context, id int32) (Collection, error) {
	row := q.db.QueryRow(ctx, getCollection, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCollectionImages = `-- name: GetCollectionImages :many
SELECT image_url FROM collection_images
WHERE collection_id = $1
`

func (q *Queries) GetCollectionImages(ctx context.Context, collectionID int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getCollectionImages, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var image_url string
		if err := rows.Scan(&image_url); err != nil {
			return nil, err
		}
		items = append(items, image_url)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionProducts = `-- name: GetCollectionProducts :many
SELECT p.id, p.name, p.description, p.price, p.created_at, p.updated_at FROM products p
JOIN collection_products cp ON p.id = cp.product_id
WHERE cp.collection_id = $1
`

func (q *Queries) GetCollectionProducts(ctx context.Context, collectionID int32) ([]Product, error) {
	rows, err := q.db.Query(ctx, getCollectionProducts, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, price, created_at, updated_at FROM products
WHERE id = $1 LIMIT 1
`

// Products
func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductFitGuide = `-- name: GetProductFitGuide :one
SELECT id, product_id, body_length, sleeve_length, chest_width, shoulder_width, arm_hole, front_rise, inseam, hem, back_rise, waist, thigh, knee, created_at, updated_at FROM fit_guides
WHERE product_id = $1 LIMIT 1
`

// Fit Guide
func (q *Queries) GetProductFitGuide(ctx context.Context, productID int32) (FitGuide, error) {
	row := q.db.QueryRow(ctx, getProductFitGuide, productID)
	var i FitGuide
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.BodyLength,
		&i.SleeveLength,
		&i.ChestWidth,
		&i.ShoulderWidth,
		&i.ArmHole,
		&i.FrontRise,
		&i.Inseam,
		&i.Hem,
		&i.BackRise,
		&i.Waist,
		&i.Thigh,
		&i.Knee,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductImages = `-- name: GetProductImages :many
SELECT image_url FROM product_images
WHERE product_id = $1
`

func (q *Queries) GetProductImages(ctx context.Context, productID int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getProductImages, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var image_url string
		if err := rows.Scan(&image_url); err != nil {
			return nil, err
		}
		items = append(items, image_url)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductSizes = `-- name: GetProductSizes :many
SELECT size_name, stock FROM product_sizes
WHERE product_id = $1
`

type GetProductSizesRow struct {
	SizeName string
	Stock    int32
}

func (q *Queries) GetProductSizes(ctx context.Context, productID int32) ([]GetProductSizesRow, error) {
	rows, err := q.db.Query(ctx, getProductSizes, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductSizesRow
	for rows.Next() {
		var i GetProductSizesRow
		if err := rows.Scan(&i.SizeName, &i.Stock); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCollections = `-- name: ListCollections :many
SELECT id, name, description, created_at, updated_at FROM collections
ORDER BY name
`

func (q *Queries) ListCollections(ctx context.Context) ([]Collection, error) {
	rows, err := q.db.Query(ctx, listCollections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, price, created_at, updated_at FROM products
ORDER BY name
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCartItem = `-- name: RemoveCartItem :exec
DELETE FROM cart_items
WHERE cart_id = $1 AND product_id = $2
`

type RemoveCartItemParams struct {
	CartID    pgtype.UUID
	ProductID int32
}

func (q *Queries) RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) error {
	_, err := q.db.Exec(ctx, removeCartItem, arg.CartID, arg.ProductID)
	return err
}

const removeProductFromCollection = `-- name: RemoveProductFromCollection :exec
DELETE FROM collection_products
WHERE collection_id = $1 AND product_id = $2
`

type RemoveProductFromCollectionParams struct {
	CollectionID int32
	ProductID    int32
}

func (q *Queries) RemoveProductFromCollection(ctx context.Context, arg RemoveProductFromCollectionParams) error {
	_, err := q.db.Exec(ctx, removeProductFromCollection, arg.CollectionID, arg.ProductID)
	return err
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
UPDATE cart_items
  SET quantity = $3,
  updated_at = NOW()
WHERE cart_id = $1 AND product_id = $2
`

type UpdateCartItemQuantityParams struct {
	CartID    pgtype.UUID
	ProductID int32
	Quantity  int32
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.Exec(ctx, updateCartItemQuantity, arg.CartID, arg.ProductID, arg.Quantity)
	return err
}

const updateCartTimestamp = `-- name: UpdateCartTimestamp :exec
UPDATE carts
  SET updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateCartTimestamp(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateCartTimestamp, id)
	return err
}

const updateCollection = `-- name: UpdateCollection :exec
UPDATE collections
  SET name = $2,
  description = $3,
  updated_at = NOW()
WHERE id = $1
`

type UpdateCollectionParams struct {
	ID          int32
	Name        string
	Description pgtype.Text
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) error {
	_, err := q.db.Exec(ctx, updateCollection, arg.ID, arg.Name, arg.Description)
	return err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
  SET name = $2,
  description = $3,
  price = $4,
  updated_at = NOW()
WHERE id = $1
`

type UpdateProductParams struct {
	ID          int32
	Name        string
	Description pgtype.Text
	Price       pgtype.Numeric
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
	)
	return err
}

const updateProductFitGuide = `-- name: UpdateProductFitGuide :exec
UPDATE fit_guides
  SET body_length = $2,
  sleeve_length = $3,
  chest_width = $4,
  shoulder_width = $5,
  arm_hole = $6,
  front_rise = $7,
  inseam = $8,
  hem = $9,
  back_rise = $10,
  waist = $11,
  thigh = $12,
  knee = $13,
  updated_at = NOW()
WHERE product_id = $1
`

type UpdateProductFitGuideParams struct {
	ProductID     int32
	BodyLength    pgtype.Numeric
	SleeveLength  pgtype.Numeric
	ChestWidth    pgtype.Numeric
	ShoulderWidth pgtype.Numeric
	ArmHole       pgtype.Numeric
	FrontRise     pgtype.Numeric
	Inseam        pgtype.Numeric
	Hem           pgtype.Numeric
	BackRise      pgtype.Numeric
	Waist         pgtype.Numeric
	Thigh         pgtype.Numeric
	Knee          pgtype.Numeric
}

func (q *Queries) UpdateProductFitGuide(ctx context.Context, arg UpdateProductFitGuideParams) error {
	_, err := q.db.Exec(ctx, updateProductFitGuide,
		arg.ProductID,
		arg.BodyLength,
		arg.SleeveLength,
		arg.ChestWidth,
		arg.ShoulderWidth,
		arg.ArmHole,
		arg.FrontRise,
		arg.Inseam,
		arg.Hem,
		arg.BackRise,
		arg.Waist,
		arg.Thigh,
		arg.Knee,
	)
	return err
}

const updateProductStock = `-- name: UpdateProductStock :exec
UPDATE product_sizes
  SET stock = $3,
  updated_at = NOW()
WHERE product_id = $1 AND size_name = $2
`

type UpdateProductStockParams struct {
	ProductID int32
	SizeName  string
	Stock     int32
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) error {
	_, err := q.db.Exec(ctx, updateProductStock, arg.ProductID, arg.SizeName, arg.Stock)
	return err
}
